{"version":3,"sources":["../src/ascii-data-table.js"],"names":[],"mappings":";;;;;;AAAA;;IAAY,C;;AACZ;;;;;;;;;;AAEA,IAAM,MAAM,SAAN,GAAM,CAAC,GAAD;AAAA,SAAS,OAAO,GAAP,KAAe,WAAf,GAA6B,CAA7B,GAAiC,CAAC,KAAK,GAAN,EAAW,MAArD;AAAA,CAAZ;AACA,IAAM,SAAS,SAAT,MAAS,CAAC,GAAD;AAAA,SAAS,IAAI,MAAb;AAAA,CAAf;AACA,IAAM,SAAS,SAAT,MAAS,CAAC,GAAD;AAAA,SAAS,EAAE,KAAF,CAAQ,KAAK,GAAb,EAAkB,GAAlB,CAAT;AAAA,CAAf;AACA,IAAM,YAAY,SAAZ,SAAY,CAAC,MAAD;AAAA,SAAY,UAAC,KAAD;AAAA,WAAW,EAAE,KAAF,CAAQ,KAAR,EAAe,MAAf,CAAX;AAAA,GAAZ;AAAA,CAAlB;AACA,IAAM,YAAY,SAAZ,SAAY,CAAC,SAAD;AAAA,SAAe,UAAC,KAAD;AAAA,WAAW,CAAC,KAAD,GAAS,EAAT,GAAc,sBAAO,SAAP,EAAkB,KAAlB,CAAzB;AAAA,GAAf;AAAA,CAAlB;AACA,IAAM,WAAW,UAAU,GAAV,CAAjB;AACA,IAAM,iBAAiB,EAAE,IAAF,CAAO,KAAK,SAAZ,CAAvB;AACA,IAAM,gBAAgB,SAAhB,aAAgB,CAAC,IAAD;AAAA,SAAU,EAAE,WAAF,CAAc,IAAd,EAAoB,IAApB,CAAyB;AAAA,WAAM,IAAN;AAAA,GAAzB,EAAqC,EAAE,IAAF,CAAO,cAAP,CAArC,CAAV;AAAA,CAAtB;AACA,IAAM,sBAAsB,SAAtB,mBAAsB,CAAC,GAAD;AAAA,SAAS,MAAM,IAAI,IAAJ,CAAS,GAAT,CAAN,GAAsB,GAA/B;AAAA,CAA5B;AACA,IAAM,mBAAmB,SAAnB,gBAAmB,CAAC,OAAD,EAAU,QAAV,EAAoB,SAApB,EAA+B,SAA/B;AAAA,SAA6C,UAAC,SAAD,EAAe;AACnF,WAAO,EAAE,MAAF,CAAS,QAAT,EAAmB,UAAU,GAAV,CAAc,UAAC,CAAD;AAAA,aAAO,UAAU,OAAV,EAAmB,CAAnB,CAAP;AAAA,KAAd,EAA4C,IAA5C,CAAiD,SAAjD,CAAnB,EAAgF,SAAhF,CAAP;AACD,GAFwB;AAAA,CAAzB;AAGA,IAAM,mBAAmB,iBAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,CAAzB;AACA,IAAM,qBAAqB,iBAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,CAA3B;AACA,IAAM,oBAAoB,iBAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,CAA1B;AACA,IAAM,sBAAsB,iBAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,CAA5B;;AAEA,IAAM,YAAY,SAAZ,SAAY,CAAC,QAAD,EAAW,QAAX,EAAqB,KAArB,EAA+B;AAC/C,MAAM,cAAc,EAAE,WAAF,CAAc,KAAd,CAApB;AACA,MAAM,gBAAgB,UAAU,KAAV,CAAtB;AACA,MAAM,iBAAiB,SAAjB,cAAiB,CAAC,CAAD;AAAA,WAAO,KAAK,GAAL,CAAS,KAAK,GAAL,CAAS,CAAT,EAAY,QAAZ,CAAT,EAAiC,YAAY,QAA7C,CAAP;AAAA,GAAvB;AACA,SAAO,YACE,GADF,CACM,UAAC,CAAD;AAAA,WAAO,EAAE,IAAF,CAAO,CAAP,EAAU,CAAV,CAAP;AAAA,GADN,EAC2B;AAD3B,GAEE,GAFF,CAEM,MAFN,EAE2B;AAF3B,GAGE,GAHF,CAGM,EAAE,KAHR,EAG2B;AAH3B,GAIE,GAJF,CAIM,EAAE,IAAF,CAAO,aAAP,CAJN,EAI8B;AAJ9B,GAKE,GALF,CAKM,EAAE,IAAF,CAAO,EAAE,IAAF,CAAO,GAAP,CAAP,CALN,EAK4B;AAL5B,GAME,GANF,CAMM,EAAE,IAAF,CAAO,MAAP,CANN,EAMuB;AANvB,GAOE,GAPF,CAOM,EAAE,IAAF,CAAO,cAAP,CAPN,EAO8B;AAP9B,GAQE,IARF,CAQO;AAAA,WAAM,CAAC,CAAD,CAAN;AAAA,GARP,EAQkB,EAAE,EARpB,CAAP,CAJ+C,CAYf;AACjC,CAbD;;AAeA,IAAM,aAAa,SAAb,UAAa,CAAC,QAAD,EAAW,KAAX,EAAqB;AACtC,SAAO,MAAM,GAAN,CAAU,UAAC,GAAD,EAAS;AACxB,QAAM,SAAS,OAAO,IAAI,GAAJ,CAAQ,GAAR,CAAP,CAAf;AACA,QAAM,WAAW,KAAK,IAAL,CAAU,SAAS,QAAnB,CAAjB;AACA,WAAO,QAAP;AACD,GAJM,CAAP;AAKD,CAND;;AAQA,IAAM,cAAc,SAAd,WAAc,CAAC,QAAD,EAAW,OAAX,EAAoB,MAApB,EAA4B,KAA5B,EAAsC;AACxD,MAAM,sBAAsB,cAAc,MAAd,EAAsB,QAAtB,CAA5B;AACA,SAAO,MAAM,GAAN,CAAU,UAAC,GAAD,EAAM,CAAN,EAAY;AAC3B,WAAO,IAAI,GAAJ,CAAQ,oBAAoB,QAAQ,CAAR,CAApB,CAAR,CAAP;AACD,GAFM,CAAP;AAGD,CALD;;AAOA,IAAM,gBAAgB,SAAhB,aAAgB,CAAC,MAAD,EAAS,QAAT;AAAA,SAAsB,UAAC,SAAD;AAAA,WAAe,UAAC,GAAD,EAAM,QAAN,EAAmB;AAC5E,UAAI,QAAQ,EAAE,UAAF,CAAa,QAAb,EAAuB,GAAvB,CAAZ;AACA,YAAM,MAAM,MAAN,GAAe,CAArB,KAA2B,SAAS,OAAO,QAAP,IAAmB,IAAI,EAAE,IAAF,CAAO,KAAP,CAAJ,CAA5B,CAA3B;AACA,aAAO,MAAM,MAAN,GAAe,SAAtB,EAAiC;AAC/B,cAAM,IAAN,CAAW,SAAS,OAAO,QAAP,CAAT,CAAX;AACD;AACD,aAAO,KAAP;AACD,KAP2C;AAAA,GAAtB;AAAA,CAAtB;;AASA,IAAM,cAAc,SAAd,WAAc,CAAC,IAAD,EAAU;AAC5B,SAAO,KAAK,MAAL,CAAY,UAAC,KAAD,EAAQ,GAAR,EAAgB;AACjC,QAAI,CAAC,MAAM,OAAN,CAAc,GAAd,CAAL,EAAyB;AACvB,aAAO,GAAG,MAAH,CAAU,KAAV,EAAiB,GAAjB,CAAP;AACD;AACD,QAAM,OAAO,EAAE,SAAF,CAAY,GAAZ,EAAiB,GAAjB,CAAqB,mBAArB,CAAb;AACA,WAAO,GAAG,MAAH,CAAU,KAAV,EAAiB,IAAjB,CAAP;AACD,GANM,EAMJ,EANI,CAAP;AAOD,CARD;;AAUA,IAAM,OAAO,SAAP,IAAO,CAAC,IAAD,EAA6C;AAAA,MAAtC,WAAsC,uEAAxB,EAAwB;AAAA,MAApB,WAAoB,uEAAN,CAAM;;AACxD,MAAI,CAAC,MAAM,OAAN,CAAc,IAAd,CAAD,IAAwB,CAAC,KAAK,MAAlC,EAA0C;AACxC,WAAO,EAAP;AACD;AACD,gBAAc,SAAS,WAAT,CAAd;AACA,MAAM,SAAS,UAAU,WAAV,EAAuB,WAAvB,EAAoC,IAApC,CAAf;AACA,MAAM,UAAU,WAAW,WAAX,EAAwB,IAAxB,CAAhB;AACA,MAAM,OAAO,YAAY,WAAZ,EAAyB,OAAzB,EAAkC,MAAlC,EAA0C,IAA1C,CAAb;AACA,MAAM,SAAS,YAAY,EAAE,IAAF,CAAO,IAAP,CAAZ,CAAf;AACA,MAAM,YAAY,EAAE,WAAF,CAAc,kBAAkB,MAAlB,CAAd,EAAyC,EAAE,IAAF,CAAO,IAAP,CAAzC,CAAlB;AACA,MAAM,QAAQ,YAAY,SAAZ,CAAd;AACA,SAAO,CACL,iBAAiB,MAAjB,CADK,4BAEF,MAFE,IAGL,mBAAmB,MAAnB,CAHK,sBAIF,KAJE,IAKL,oBAAoB,MAApB,CALK,GAML,IANK,CAMA,IANA,CAAP;AAOD,CAlBD;;kBAoBe;AACb,iBAAe,uBAAC,IAAD;AAAA,WAAU,cAAc,IAAd,CAAV;AAAA,GADF;AAEb,2BAAyB,iCAAC,cAAD;AAAA,QAAiB,cAAjB,uEAAkC,EAAlC;AAAA,WAAyC,KAAK,cAAL,EAAqB,cAArB,CAAzC;AAAA,GAFZ;AAGb,SAAO,eAAC,IAAD;AAAA,QAAO,cAAP,uEAAwB,EAAxB;AAAA,WAA+B,KAAK,cAAc,IAAd,CAAL,EAA0B,cAA1B,CAA/B;AAAA,GAHM;AAIb,kBAAgB,wBAAC,IAAD;AAAA,WAAU,OAAO,UAAU,CAAV,EAAa,CAAb,EAAgB,cAAc,IAAd,CAAhB,CAAP,CAAV;AAAA;AAJH,C","file":"ascii-data-table.js","sourcesContent":["import * as R from './functions'\nimport repeat from 'core-js/library/fn/string/repeat'\n\nconst len = (val) => typeof val === 'undefined' ? 0 : ('' + val).length\nconst arrLen = (arr) => arr.length\nconst arrMax = (arr) => R.apply(Math.max, arr)\nconst matrixCol = (matrix) => (colNr) => R.pluck(colNr, matrix)\nconst padString = (character) => (width) => !width ? '' : repeat(character, width)\nconst spacePad = padString(' ')\nconst stringifyArray = R.cMap(JSON.stringify)\nconst stringifyRows = (rows) => R.EitherArray(rows).fold(() => null, R.cMap(stringifyArray))\nconst insertColSeparators = (arr) => '│' + arr.join('│') + '│'\nconst getSeparatorLine = (horChar, leftChar, crossChar, rightChar) => (colWidths) => {\n  return R.concat(leftChar, colWidths.map((w) => padString(horChar)(w)).join(crossChar), rightChar)\n}\nconst topSeparatorLine = getSeparatorLine('═', '╒', '╤', '╕')\nconst thickSeparatorLine = getSeparatorLine('═', '╞', '╪', '╡')\nconst thinSeparatorLine = getSeparatorLine('─', '├', '┼', '┤')\nconst bottomSeparatorLine = getSeparatorLine('─', '└', '┴', '┘')\n\nconst colWidths = (maxWidth, minWidth, input) => {\n  const inputEither = R.EitherArray(input)\n  const columnAtIndex = matrixCol(input)\n  const normalizeWidth = (w) => Math.min(Math.max(w, minWidth), (maxWidth || Infinity))\n  return inputEither\n          .map((r) => R.head(r)[0]) // Grab title row\n          .map(arrLen)              // Get the number of columns\n          .map(R.array)             // Create a new array with same number of columns\n          .map(R.cMap(columnAtIndex))  // Populate new array with columns from input\n          .map(R.cMap(R.cMap(len)))  // Measure the width of every column of every row\n          .map(R.cMap(arrMax))  // Grab the max width of every column\n          .map(R.cMap(normalizeWidth)) // Normalize width to be within limits\n          .fold(() => [0], R.id)  // default to 0\n}\n\nconst rowHeights = (maxWidth, input) => {\n  return input.map((row) => {\n    const maxLen = arrMax(row.map(len))\n    const numLines = Math.ceil(maxLen / maxWidth)\n    return numLines\n  })\n}\n\nconst rowsToLines = (maxWidth, heights, widths, input) => {\n  const columnToLinesWidths = columnToLines(widths, maxWidth)\n  return input.map((row, i) => {\n    return row.map(columnToLinesWidths(heights[i]))\n  })\n}\n\nconst columnToLines = (widths, maxWidth) => (rowHeight) => (col, colIndex) => {\n  let lines = R.splitEvery(maxWidth, col)\n  lines[lines.length - 1] += spacePad(widths[colIndex] - len(R.last(lines)))\n  while (lines.length < rowHeight) {\n    lines.push(spacePad(widths[colIndex]))\n  }\n  return lines\n}\n\nconst createLines = (rows) => {\n  return rows.reduce((lines, row) => {\n    if (!Array.isArray(row)) {\n      return [].concat(lines, row)\n    }\n    const tRow = R.transpose(row).map(insertColSeparators)\n    return [].concat(lines, tRow)\n  }, [])\n}\n\nconst main = (rows, maxColWidth = 30, minColWidth = 3) => {\n  if (!Array.isArray(rows) || !rows.length) {\n    return ''\n  }\n  maxColWidth = parseInt(maxColWidth)\n  const widths = colWidths(maxColWidth, minColWidth, rows)\n  const heights = rowHeights(maxColWidth, rows)\n  const norm = rowsToLines(maxColWidth, heights, widths, rows)\n  const header = createLines(R.head(norm))\n  const separated = R.intersperse(thinSeparatorLine(widths), R.tail(norm))\n  const lines = createLines(separated)\n  return [\n    topSeparatorLine(widths),\n    ...header,\n    thickSeparatorLine(widths),\n    ...lines,\n    bottomSeparatorLine(widths)\n  ].join('\\n')\n}\n\nexport default {\n  serializeData: (rows) => stringifyRows(rows),\n  tableFromSerializedData: (serializedRows, maxColumnWidth = 30) => main(serializedRows, maxColumnWidth),\n  table: (rows, maxColumnWidth = 30) => main(stringifyRows(rows), maxColumnWidth),\n  maxColumnWidth: (rows) => arrMax(colWidths(0, 0, stringifyRows(rows)))\n}\n"]}