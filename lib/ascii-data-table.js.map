{"version":3,"sources":["../src/ascii-data-table.js"],"names":[],"mappings":"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","file":"ascii-data-table.js","sourcesContent":["import R from 'ramda'\nimport repeat from 'core-js/library/fn/string/repeat'\n\nconst len = (val) => typeof val === 'undefined' ? 0 : ('' + val).length\nconst padString = (character, width) => !width ? '' : repeat(character, width)\nconst stringifyRows = (rows) => {\n  if (!Array.isArray(rows) || !rows.length) return []\n  return rows.map((row) => row.map(JSON.stringify))\n}\nconst insertColSeparators = (arr) => '│' + arr.join('│') + '│'\nconst getTopSeparatorLine = (colWidths) => getSeparatorLine('═', '╒', '╤', '╕', colWidths)\nconst getThickSeparatorLine = (colWidths) => getSeparatorLine('═', '╞', '╪', '╡', colWidths)\nconst getThinSeparatorLine = (colWidths) => getSeparatorLine('─', '├', '┼', '┤', colWidths)\nconst getBottomSeparatorLine = (colWidths) => getSeparatorLine('─', '└', '┴', '┘', colWidths)\nconst getSeparatorLine = (horChar, leftChar, crossChar, rightChar, colWidths) => {\n  return leftChar + colWidths.map(function (w) {\n    return padString(horChar, w)\n  }).join(crossChar) + rightChar\n}\n\nconst colWidths = (maxWidth, minWidth, input) => {\n  if (!Array.isArray(input)) {\n    return 0\n  }\n  return input[0].map((_, i) => {\n    const tCol = R.pluck(i, input).map((col) => len(col))\n    const measuredMax = Math.max(R.apply(Math.max, tCol), minWidth)\n    return measuredMax > maxWidth && maxWidth > 0 ? maxWidth : measuredMax\n  })\n}\n\nconst rowHeights = (maxWidth, input) => {\n  return input.map((row) => {\n    const maxLen = R.apply(Math.max, row.map((col) => len(col)))\n    const numLines = Math.ceil(maxLen / maxWidth)\n    return numLines\n  })\n}\n\nconst splitRowsToLines = (maxWidth, heights, widths, input) => {\n  return input.map((row, i) => {\n    return row.map((col, colIndex) => {\n      let lines = R.splitEvery(maxWidth, col)\n      const lastLinesLen = len(R.last(lines))\n      if (lastLinesLen < widths[colIndex]) {\n        lines[lines.length - 1] = lines[lines.length - 1] + padString(' ', widths[colIndex] - lastLinesLen)\n      }\n      while (lines.length < heights[i]) {\n        lines = [].concat(...lines, [padString(' ', widths[colIndex])])\n      }\n      return lines\n    })\n  })\n}\n\nconst createLines = (rows) => {\n  return rows.reduce((lines, row) => {\n    if (!Array.isArray(row)) {\n      return [].concat(lines, row)\n    }\n    const tRow = R.transpose(row).map(insertColSeparators)\n    return [].concat(lines, tRow)\n  }, [])\n}\n\nconst renderForWidth = (rows, maxColWidth = 30, minColWidth = 3) => {\n  if (!Array.isArray(rows) || !rows.length) {\n    return ''\n  }\n  maxColWidth = parseInt(maxColWidth)\n  const widths = colWidths(maxColWidth, minColWidth, rows)\n  const heights = rowHeights(maxColWidth, rows)\n  const norm = splitRowsToLines(maxColWidth, heights, widths, rows)\n  const header = createLines([R.head(norm)])\n  const separated = R.intersperse(getThinSeparatorLine(widths), R.tail(norm))\n  const lines = createLines(separated)\n  return [\n    getTopSeparatorLine(widths),\n    ...header,\n    getThickSeparatorLine(widths),\n    ...lines,\n    getBottomSeparatorLine(widths)\n  ].join('\\n')\n}\n\nexport default {\n  serializeData: (rows) => stringifyRows(rows),\n  tableFromSerializedData: (serializedRows, maxColumnWidth = 30) => renderForWidth(serializedRows, maxColumnWidth),\n  table: (rows, maxColumnWidth = 30) => renderForWidth(stringifyRows(rows), maxColumnWidth),\n  maxColumnWidth: (rows) => R.apply(Math.max, colWidths(0, 0, stringifyRows(rows)))\n}\n"]}